# Kubernetes Deployment Strategy for New Revive (With StatefulSets and VolumeClaimTemplates)

## 1. Namespace Configuration
---
apiVersion: v1
kind: Namespace
metadata:
  name: s6arsene
  labels:
    app: s6arsene-platform

---
## 2. Secrets
apiVersion: v1
kind: Secret
metadata:
  name: database-secrets
  namespace: s6arsene
type: Opaque
data:
  postgres-password: cGFzc3dvcmQ=  # base64 encoded "password"
  mysql-root-password: cGFzc3dvcmQ=  # base64 encoded "password"

---
## 3. ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: s6arsene
data:
  # Database configuration
  postgres-user: "postgres"
  postgres-db: "orders"
  mysql-db: "catalog"
  
  # Service endpoints for UI
  endpoints-catalog: "http://catalog-service:8004"
  endpoints-carts: "http://carts-service:8003"
  endpoints-orders: "http://orders-service:8001"
  endpoints-checkout: "http://checkout-service:8002"
  endpoints-assets: "http://assets-service:8005"
  
  # Database hosts
  orders-db-host: "orders-db-service"
  catalog-db-host: "catalog-db-0.catalog-db-service"
  checkout-cache-host: "checkout-cache-service"
  carts-db-host: "carts-db-service"
  
  # Ports
  postgres-port: "5432"
  mysql-port: "3306"
  redis-port: "6379"
  dynamodb-port: "8000"
  
  # RabbitMQ configuration
  rabbitmq-url: "amqp://rabbitmq-service"
  rabbitmq-user: "admin"

---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secret
  namespace: s6arsene
type: Opaque
data:
  rabbitmq-password: YWRtaW4=  # base64 encoded "admin"

---
## 4. UI Service Deployment (Frontend)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui-deployment
  namespace: s6arsene
spec:
  replicas: 1  # Initial replica count, HPA will manage scaling
  selector:
    matchLabels:
      app: ui
  template:
    metadata:
      labels:
        app: ui
        tier: frontend
    spec:
      containers:
      - name: ui
        image: arsenet10/new-revive:ui
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: ENDPOINTS_CATALOG
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: endpoints-catalog
        - name: ENDPOINTS_CARTS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: endpoints-carts
        - name: ENDPOINTS_ORDERS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: endpoints-orders
        - name: ENDPOINTS_CHECKOUT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: endpoints-checkout
        - name: ENDPOINTS_ASSETS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: endpoints-assets

---
apiVersion: v1
kind: Service
metadata:
  name: ui-service
  namespace: s6arsene
spec:
  selector:
    app: ui
  ports:
  - port: 8080
    targetPort: 8080
  type: LoadBalancer

---
## 5. Orders Service StatefulSet (using volumeClaimTemplate)
apiVersion: v1
kind: Service
metadata:
  name: orders-service
  namespace: s6arsene
spec:
  selector:
    app: orders
  ports:
  - port: 8001
    targetPort: 8001
  clusterIP: None

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: orders
  namespace: s6arsene
spec:
  serviceName: orders-service
  replicas: 1  # Initial replica count, HPA will manage scaling
  selector:
    matchLabels:
      app: orders
  template:
    metadata:
      labels:
        app: orders
        tier: backend
    spec:
      containers:
      - name: orders
        image: arsenet10/new-revive:orders
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: orders-db-host
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: postgres-user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: postgres-db
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: postgres-port
        - name: RABBITMQ_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: rabbitmq-url
        volumeMounts:
        - name: orders-volume
          mountPath: /app
  volumeClaimTemplates:
  - metadata:
      name: orders-volume
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "do-block-storage-retain"
      resources:
        requests:
          storage: 5Gi

---
## 6. Checkout Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: checkout-deployment
  namespace: s6arsene
spec:
  replicas: 1  # Initial replica count, HPA will manage scaling
  selector:
    matchLabels:
      app: checkout
  template:
    metadata:
      labels:
        app: checkout
        tier: backend
    spec:
      containers:
      - name: checkout
        image: arsenet10/new-revive:checkout
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: checkout-cache-host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: redis-port

---
apiVersion: v1
kind: Service
metadata:
  name: checkout-service
  namespace: s6arsene
spec:
  selector:
    app: checkout
  ports:
  - port: 8002
    targetPort: 8002

---
## 7. Carts Service StatefulSet (using volumeClaimTemplate)
apiVersion: v1
kind: Service
metadata:
  name: carts-service
  namespace: s6arsene
spec:
  selector:
    app: carts
  ports:
  - port: 8003
    targetPort: 8003
  clusterIP: None

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: carts
  namespace: s6arsene
spec:
  serviceName: carts-service
  replicas: 1  # Initial replica count, HPA will manage scaling
  selector:
    matchLabels:
      app: carts
  template:
    metadata:
      labels:
        app: carts
        tier: backend
    spec:
      containers:
      - name: carts
        image: arsenet10/new-revive:cart
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: DYNAMODB_ENDPOINT
          value: "http://carts-db-service:8000"
        volumeMounts:
        - name: cart-volume
          mountPath: /app
  volumeClaimTemplates:
  - metadata:
      name: cart-volume
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "do-block-storage-retain"
      resources:
        requests:
          storage: 5Gi

---
## 8. Catalog Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-deployment
  namespace: s6arsene
spec:
  replicas: 1  # Initial replica count, HPA will manage scaling
  selector:
    matchLabels:
      app: catalog
  template:
    metadata:
      labels:
        app: catalog
        tier: backend
    spec:
      containers:
      - name: catalog
        image: arsenet10/new-revive:catalog
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: catalog-db-host
        - name: DB_USER
          value: "root"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-root-password
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: mysql-db
        

---
apiVersion: v1
kind: Service
metadata:
  name: catalog-service
  namespace: s6arsene
spec:
  selector:
    app: catalog
  ports:
  - port: 8004
    targetPort: 8004

---
## 9. Assets Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assets-deployment
  namespace: s6arsene
spec:
  replicas: 1  # Initial replica count, HPA will manage scaling
  selector:
    matchLabels:
      app: assets
  template:
    metadata:
      labels:
        app: assets
        tier: frontend
    spec:
      containers:
      - name: assets
        image: arsenet10/new-revive:asset
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: assets-service
  namespace: s6arsene
spec:
  selector:
    app: assets
  ports:
  - port: 8005
    targetPort: 8005

---
## 10. Orders Database (PostgreSQL) StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: orders-db-service
  namespace: s6arsene
spec:
  selector:
    app: orders-db
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None  # Headless service for StatefulSet

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: orders-db
  namespace: s6arsene
spec:
  serviceName: orders-db-service
  replicas: 1
  selector:
    matchLabels:
      app: orders-db
  template:
    metadata:
      labels:
        app: orders-db
        tier: database
    spec:
      containers:
      - name: orders-db
        image: arsenet10/new-revive:orders-db
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: postgres-user
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: postgres-db
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: orders-db-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: orders-db-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "do-block-storage-retain"
      resources:
        requests:
          storage: 10Gi

---
## 11. Checkout Cache (Redis) StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: checkout-cache-service
  namespace: s6arsene
spec:
  selector:
    app: checkout-cache
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None  # Headless service for StatefulSet

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: checkout-cache
  namespace: s6arsene
spec:
  serviceName: checkout-cache-service
  replicas: 1
  selector:
    matchLabels:
      app: checkout-cache
  template:
    metadata:
      labels:
        app: checkout-cache
        tier: cache
    spec:
      containers:
      - name: checkout-cache
        image: arsenet10/new-revive:checkout-db
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: checkout-cache-data
          mountPath: /data
  volumeClaimTemplates:
  - metadata:
      name: checkout-cache-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "do-block-storage-retain"
      resources:
        requests:
          storage: 2Gi

---
## 12. Carts Database (DynamoDB Local) StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: carts-db-service
  namespace: s6arsene
spec:
  selector:
    app: carts-db
  ports:
  - port: 8000
    targetPort: 8000
  clusterIP: None  # Headless service for StatefulSet

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: carts-db
  namespace: s6arsene
spec:
  serviceName: carts-db-service
  replicas: 1
  selector:
    matchLabels:
      app: carts-db
  template:
    metadata:
      labels:
        app: carts-db
        tier: database
    spec:
      containers:
      - name: carts-db
        image: arsenet10/new-revive:cart-db
        ports:
        - containerPort: 8000
        command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-dbPath", "/home/dynamodblocal/data"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: carts-db-data
          mountPath: /home/dynamodblocal/data
  volumeClaimTemplates:
  - metadata:
      name: carts-db-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "do-block-storage-retain"
      resources:
        requests:
          storage: 5Gi

---
## 13. Catalog Database (MySQL) StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: catalog-db-service
  namespace: s6arsene
spec:
  selector:
    app: catalog-db
  ports:
  - port: 3306
    targetPort: 3306
  clusterIP: None  # Headless service for StatefulSet

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: catalog-db
  namespace: s6arsene
spec:
  serviceName: catalog-db-service
  replicas: 1
  selector:
    matchLabels:
      app: catalog-db
  template:
    metadata:
      labels:
        app: catalog-db
        tier: database
    spec:
      containers:
      - name: catalog-db
        image: arsenet10/new-revive:catalog-db
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: mysql-db
        ports:
        - containerPort: 3306
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: catalog-db-data
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: catalog-db-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "do-block-storage-retain"
      resources:
        requests:
          storage: 10Gi

---
## 14. RabbitMQ StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: s6arsene
spec:
  selector:
    app: rabbitmq
  ports:
  - name: amqp
    port: 5672
    targetPort: 5672
  - name: management
    port: 15672
    targetPort: 15672
  clusterIP: None  # Headless service for StatefulSet

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-lb
  namespace: s6arsene
spec:
  selector:
    app: rabbitmq
  ports:
  - name: amqp
    port: 5672
    targetPort: 5672
  - name: management
    port: 15672
    targetPort: 15672
  type: LoadBalancer

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: s6arsene
spec:
  serviceName: rabbitmq-service
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
        tier: messaging
    spec:
      containers:
      - name: rabbitmq
        image: arsenet10/new-revive:orders-rabbit-mq
        ports:
        - containerPort: 5672
        - containerPort: 15672
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: rabbitmq-user
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "do-block-storage-retain"
      resources:
        requests:
          storage: 5Gi

---
# ## 15. Ingress Configuration
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: s6arsene-ingress
#   namespace: s6arsene
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   rules:
#   - host: s6arsene.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: ui-service
#             port:
#               number: 8080
#       - path: /api/orders
#         pathType: Prefix
#         backend:
#           service:
#             name: orders-service
#             port:
#               number: 8001
#       - path: /api/checkout
#         pathType: Prefix
#         backend:
#           service:
#             name: checkout-service
#             port:
#               number: 8002
#       - path: /api/carts
#         pathType: Prefix
#         backend:
#           service:
#             name: carts-service
#             port:
#               number: 8003
#       - path: /api/catalog
#         pathType: Prefix
#         backend:
#           service:
#             name: catalog-service
#             port:
#               number: 8004
#       - path: /api/assets
#         pathType: Prefix
#         backend:
#           service:
#             name: assets-service
#             port:
#               number: 8005

---
## 16. Horizontal Pod Autoscaling Configuration
# UI Service HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ui-hpa
  namespace: s6arsene
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ui-deployment
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Orders Service HPA (for StatefulSet)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orders-hpa
  namespace: s6arsene
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: orders
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Checkout Service HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: checkout-hpa
  namespace: s6arsene
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: checkout-deployment
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Carts Service HPA (for StatefulSet)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: carts-hpa
  namespace: s6arsene
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: carts
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Catalog Service HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: catalog-hpa
  namespace: s6arsene
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: catalog-deployment
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Assets Service HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: assets-hpa
  namespace: s6arsene
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: assets-deployment
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
## 17. Network Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: s6arsene
spec:
  podSelector:
    matchLabels:
      tier: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: frontend
    - podSelector:
        matchLabels:
          tier: backend
  egress:
  - to:
    - podSelector:
        matchLabels:
          tier: database
    - podSelector:
        matchLabels:
          tier: cache
    - podSelector:
        matchLabels:
          tier: messaging

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
  namespace: s6arsene
spec:
  podSelector:
    matchLabels:
      tier: frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []  # Allow external traffic
  egress:
  - to:
    - podSelector:
        matchLabels:
          tier: backend
    - podSelector:
        matchLabels:
          tier: frontend